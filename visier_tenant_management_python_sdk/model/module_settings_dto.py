# coding: utf-8

"""
    Visier Tenant Management APIs

    Visier APIs for managing tenants

    The version of the OpenAPI document: 22222222.99201.1200
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from visier_tenant_management_python_sdk import schemas  # noqa: F401


class ModuleSettingsDTO(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            unavailableForAssignment = schemas.BoolSchema
            specialHandlingInstruction = schemas.StrSchema
            locale = schemas.StrSchema
            __annotations__ = {
                "unavailableForAssignment": unavailableForAssignment,
                "specialHandlingInstruction": specialHandlingInstruction,
                "locale": locale,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unavailableForAssignment"]) -> MetaOapg.properties.unavailableForAssignment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["specialHandlingInstruction"]) -> MetaOapg.properties.specialHandlingInstruction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locale"]) -> MetaOapg.properties.locale: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["unavailableForAssignment", "specialHandlingInstruction", "locale", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unavailableForAssignment"]) -> typing.Union[MetaOapg.properties.unavailableForAssignment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["specialHandlingInstruction"]) -> typing.Union[MetaOapg.properties.specialHandlingInstruction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locale"]) -> typing.Union[MetaOapg.properties.locale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["unavailableForAssignment", "specialHandlingInstruction", "locale", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        unavailableForAssignment: typing.Union[MetaOapg.properties.unavailableForAssignment, bool, schemas.Unset] = schemas.unset,
        specialHandlingInstruction: typing.Union[MetaOapg.properties.specialHandlingInstruction, str, schemas.Unset] = schemas.unset,
        locale: typing.Union[MetaOapg.properties.locale, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModuleSettingsDTO':
        return super().__new__(
            cls,
            *args,
            unavailableForAssignment=unavailableForAssignment,
            specialHandlingInstruction=specialHandlingInstruction,
            locale=locale,
            _configuration=_configuration,
            **kwargs,
        )
