# coding: utf-8

"""
    Visier Tenant Management APIs

    Visier APIs for managing tenants

    The version of the OpenAPI document: 22222222.99201.1200
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from visier_tenant_management_python_sdk import schemas  # noqa: F401


class TenantManagementAPIGetResponseDTO(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            tenantCode = schemas.StrSchema
            tenantDisplayName = schemas.StrSchema
            status = schemas.StrSchema
            provisionDate = schemas.StrSchema
            currentDataVersion = schemas.StrSchema
            dataVersionDate = schemas.StrSchema
        
            @staticmethod
            def purchasedModules() -> typing.Type['TenantManagementAPIGetResponseDTOPurchasedModules']:
                return TenantManagementAPIGetResponseDTOPurchasedModules
            industryCode = schemas.IntSchema
        
            @staticmethod
            def primaryBusinessLocation() -> typing.Type['BusinessLocationDTO']:
                return BusinessLocationDTO
            canAdministerOtherTenants = schemas.BoolSchema
        
            @staticmethod
            def embeddableDomains() -> typing.Type['TenantManagementAPIGetResponseDTOEmbeddableDomains']:
                return TenantManagementAPIGetResponseDTOEmbeddableDomains
            
            
            class customProperties(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CustomPropertyDTO']:
                        return CustomPropertyDTO
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CustomPropertyDTO'], typing.List['CustomPropertyDTO']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'customProperties':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CustomPropertyDTO':
                    return super().__getitem__(i)
        
            @staticmethod
            def ssoInstanceIssuers() -> typing.Type['TenantManagementAPIGetResponseDTOSsoInstanceIssuers']:
                return TenantManagementAPIGetResponseDTOSsoInstanceIssuers
            vanityUrlName = schemas.StrSchema
            homeAnalysisId = schemas.StrSchema
            
            
            class homeAnalysisByUserGroup(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['HomeAnalysisByUserGroupDTO']:
                        return HomeAnalysisByUserGroupDTO
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['HomeAnalysisByUserGroupDTO'], typing.List['HomeAnalysisByUserGroupDTO']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'homeAnalysisByUserGroup':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'HomeAnalysisByUserGroupDTO':
                    return super().__getitem__(i)
            clickThroughLink = schemas.StrSchema
            clickThroughLinkEnabled = schemas.StrSchema
            __annotations__ = {
                "tenantCode": tenantCode,
                "tenantDisplayName": tenantDisplayName,
                "status": status,
                "provisionDate": provisionDate,
                "currentDataVersion": currentDataVersion,
                "dataVersionDate": dataVersionDate,
                "purchasedModules": purchasedModules,
                "industryCode": industryCode,
                "primaryBusinessLocation": primaryBusinessLocation,
                "canAdministerOtherTenants": canAdministerOtherTenants,
                "embeddableDomains": embeddableDomains,
                "customProperties": customProperties,
                "ssoInstanceIssuers": ssoInstanceIssuers,
                "vanityUrlName": vanityUrlName,
                "homeAnalysisId": homeAnalysisId,
                "homeAnalysisByUserGroup": homeAnalysisByUserGroup,
                "clickThroughLink": clickThroughLink,
                "clickThroughLinkEnabled": clickThroughLinkEnabled,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tenantCode"]) -> MetaOapg.properties.tenantCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tenantDisplayName"]) -> MetaOapg.properties.tenantDisplayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provisionDate"]) -> MetaOapg.properties.provisionDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentDataVersion"]) -> MetaOapg.properties.currentDataVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataVersionDate"]) -> MetaOapg.properties.dataVersionDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchasedModules"]) -> 'TenantManagementAPIGetResponseDTOPurchasedModules': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["industryCode"]) -> MetaOapg.properties.industryCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryBusinessLocation"]) -> 'BusinessLocationDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canAdministerOtherTenants"]) -> MetaOapg.properties.canAdministerOtherTenants: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["embeddableDomains"]) -> 'TenantManagementAPIGetResponseDTOEmbeddableDomains': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customProperties"]) -> MetaOapg.properties.customProperties: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssoInstanceIssuers"]) -> 'TenantManagementAPIGetResponseDTOSsoInstanceIssuers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vanityUrlName"]) -> MetaOapg.properties.vanityUrlName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["homeAnalysisId"]) -> MetaOapg.properties.homeAnalysisId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["homeAnalysisByUserGroup"]) -> MetaOapg.properties.homeAnalysisByUserGroup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clickThroughLink"]) -> MetaOapg.properties.clickThroughLink: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clickThroughLinkEnabled"]) -> MetaOapg.properties.clickThroughLinkEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tenantCode", "tenantDisplayName", "status", "provisionDate", "currentDataVersion", "dataVersionDate", "purchasedModules", "industryCode", "primaryBusinessLocation", "canAdministerOtherTenants", "embeddableDomains", "customProperties", "ssoInstanceIssuers", "vanityUrlName", "homeAnalysisId", "homeAnalysisByUserGroup", "clickThroughLink", "clickThroughLinkEnabled", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tenantCode"]) -> typing.Union[MetaOapg.properties.tenantCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tenantDisplayName"]) -> typing.Union[MetaOapg.properties.tenantDisplayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provisionDate"]) -> typing.Union[MetaOapg.properties.provisionDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentDataVersion"]) -> typing.Union[MetaOapg.properties.currentDataVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataVersionDate"]) -> typing.Union[MetaOapg.properties.dataVersionDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchasedModules"]) -> typing.Union['TenantManagementAPIGetResponseDTOPurchasedModules', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["industryCode"]) -> typing.Union[MetaOapg.properties.industryCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryBusinessLocation"]) -> typing.Union['BusinessLocationDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canAdministerOtherTenants"]) -> typing.Union[MetaOapg.properties.canAdministerOtherTenants, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["embeddableDomains"]) -> typing.Union['TenantManagementAPIGetResponseDTOEmbeddableDomains', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customProperties"]) -> typing.Union[MetaOapg.properties.customProperties, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssoInstanceIssuers"]) -> typing.Union['TenantManagementAPIGetResponseDTOSsoInstanceIssuers', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vanityUrlName"]) -> typing.Union[MetaOapg.properties.vanityUrlName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["homeAnalysisId"]) -> typing.Union[MetaOapg.properties.homeAnalysisId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["homeAnalysisByUserGroup"]) -> typing.Union[MetaOapg.properties.homeAnalysisByUserGroup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clickThroughLink"]) -> typing.Union[MetaOapg.properties.clickThroughLink, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clickThroughLinkEnabled"]) -> typing.Union[MetaOapg.properties.clickThroughLinkEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tenantCode", "tenantDisplayName", "status", "provisionDate", "currentDataVersion", "dataVersionDate", "purchasedModules", "industryCode", "primaryBusinessLocation", "canAdministerOtherTenants", "embeddableDomains", "customProperties", "ssoInstanceIssuers", "vanityUrlName", "homeAnalysisId", "homeAnalysisByUserGroup", "clickThroughLink", "clickThroughLinkEnabled", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tenantCode: typing.Union[MetaOapg.properties.tenantCode, str, schemas.Unset] = schemas.unset,
        tenantDisplayName: typing.Union[MetaOapg.properties.tenantDisplayName, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        provisionDate: typing.Union[MetaOapg.properties.provisionDate, str, schemas.Unset] = schemas.unset,
        currentDataVersion: typing.Union[MetaOapg.properties.currentDataVersion, str, schemas.Unset] = schemas.unset,
        dataVersionDate: typing.Union[MetaOapg.properties.dataVersionDate, str, schemas.Unset] = schemas.unset,
        purchasedModules: typing.Union['TenantManagementAPIGetResponseDTOPurchasedModules', schemas.Unset] = schemas.unset,
        industryCode: typing.Union[MetaOapg.properties.industryCode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        primaryBusinessLocation: typing.Union['BusinessLocationDTO', schemas.Unset] = schemas.unset,
        canAdministerOtherTenants: typing.Union[MetaOapg.properties.canAdministerOtherTenants, bool, schemas.Unset] = schemas.unset,
        embeddableDomains: typing.Union['TenantManagementAPIGetResponseDTOEmbeddableDomains', schemas.Unset] = schemas.unset,
        customProperties: typing.Union[MetaOapg.properties.customProperties, list, tuple, schemas.Unset] = schemas.unset,
        ssoInstanceIssuers: typing.Union['TenantManagementAPIGetResponseDTOSsoInstanceIssuers', schemas.Unset] = schemas.unset,
        vanityUrlName: typing.Union[MetaOapg.properties.vanityUrlName, str, schemas.Unset] = schemas.unset,
        homeAnalysisId: typing.Union[MetaOapg.properties.homeAnalysisId, str, schemas.Unset] = schemas.unset,
        homeAnalysisByUserGroup: typing.Union[MetaOapg.properties.homeAnalysisByUserGroup, list, tuple, schemas.Unset] = schemas.unset,
        clickThroughLink: typing.Union[MetaOapg.properties.clickThroughLink, str, schemas.Unset] = schemas.unset,
        clickThroughLinkEnabled: typing.Union[MetaOapg.properties.clickThroughLinkEnabled, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TenantManagementAPIGetResponseDTO':
        return super().__new__(
            cls,
            *args,
            tenantCode=tenantCode,
            tenantDisplayName=tenantDisplayName,
            status=status,
            provisionDate=provisionDate,
            currentDataVersion=currentDataVersion,
            dataVersionDate=dataVersionDate,
            purchasedModules=purchasedModules,
            industryCode=industryCode,
            primaryBusinessLocation=primaryBusinessLocation,
            canAdministerOtherTenants=canAdministerOtherTenants,
            embeddableDomains=embeddableDomains,
            customProperties=customProperties,
            ssoInstanceIssuers=ssoInstanceIssuers,
            vanityUrlName=vanityUrlName,
            homeAnalysisId=homeAnalysisId,
            homeAnalysisByUserGroup=homeAnalysisByUserGroup,
            clickThroughLink=clickThroughLink,
            clickThroughLinkEnabled=clickThroughLinkEnabled,
            _configuration=_configuration,
            **kwargs,
        )

from visier_tenant_management_python_sdk.model.business_location_dto import BusinessLocationDTO
from visier_tenant_management_python_sdk.model.custom_property_dto import CustomPropertyDTO
from visier_tenant_management_python_sdk.model.home_analysis_by_user_group_dto import HomeAnalysisByUserGroupDTO
from visier_tenant_management_python_sdk.model.tenant_management_api_get_response_dto_embeddable_domains import TenantManagementAPIGetResponseDTOEmbeddableDomains
from visier_tenant_management_python_sdk.model.tenant_management_api_get_response_dto_purchased_modules import TenantManagementAPIGetResponseDTOPurchasedModules
from visier_tenant_management_python_sdk.model.tenant_management_api_get_response_dto_sso_instance_issuers import TenantManagementAPIGetResponseDTOSsoInstanceIssuers
