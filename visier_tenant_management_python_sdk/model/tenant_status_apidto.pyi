# coding: utf-8

"""
    Visier Tenant Management APIs

    Visier APIs for managing tenants

    The version of the OpenAPI document: 22222222.99201.1200
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from visier_tenant_management_python_sdk import schemas  # noqa: F401


class TenantStatusAPIDTO(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            tenantCode = schemas.StrSchema
            status = schemas.StrSchema
            tenantDisplayName = schemas.StrSchema
            canAdministerOtherTenants = schemas.BoolSchema
            __annotations__ = {
                "tenantCode": tenantCode,
                "status": status,
                "tenantDisplayName": tenantDisplayName,
                "canAdministerOtherTenants": canAdministerOtherTenants,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tenantCode"]) -> MetaOapg.properties.tenantCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tenantDisplayName"]) -> MetaOapg.properties.tenantDisplayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canAdministerOtherTenants"]) -> MetaOapg.properties.canAdministerOtherTenants: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tenantCode", "status", "tenantDisplayName", "canAdministerOtherTenants", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tenantCode"]) -> typing.Union[MetaOapg.properties.tenantCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tenantDisplayName"]) -> typing.Union[MetaOapg.properties.tenantDisplayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canAdministerOtherTenants"]) -> typing.Union[MetaOapg.properties.canAdministerOtherTenants, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tenantCode", "status", "tenantDisplayName", "canAdministerOtherTenants", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tenantCode: typing.Union[MetaOapg.properties.tenantCode, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        tenantDisplayName: typing.Union[MetaOapg.properties.tenantDisplayName, str, schemas.Unset] = schemas.unset,
        canAdministerOtherTenants: typing.Union[MetaOapg.properties.canAdministerOtherTenants, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TenantStatusAPIDTO':
        return super().__new__(
            cls,
            *args,
            tenantCode=tenantCode,
            status=status,
            tenantDisplayName=tenantDisplayName,
            canAdministerOtherTenants=canAdministerOtherTenants,
            _configuration=_configuration,
            **kwargs,
        )
