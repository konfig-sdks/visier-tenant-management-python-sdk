# coding: utf-8

"""
    Visier Tenant Management APIs

    Visier APIs for managing tenants

    The version of the OpenAPI document: 22222222.99201.1200
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from visier_tenant_management_python_sdk.pydantic.business_location_dto import BusinessLocationDTO
from visier_tenant_management_python_sdk.pydantic.custom_property_dto import CustomPropertyDTO
from visier_tenant_management_python_sdk.pydantic.home_analysis_by_user_group_dto import HomeAnalysisByUserGroupDTO
from visier_tenant_management_python_sdk.pydantic.tenant_management_api_get_response_dto_embeddable_domains import TenantManagementAPIGetResponseDTOEmbeddableDomains
from visier_tenant_management_python_sdk.pydantic.tenant_management_api_get_response_dto_purchased_modules import TenantManagementAPIGetResponseDTOPurchasedModules
from visier_tenant_management_python_sdk.pydantic.tenant_management_api_get_response_dto_sso_instance_issuers import TenantManagementAPIGetResponseDTOSsoInstanceIssuers

class TenantManagementAPIGetResponseDTO(BaseModel):
    # The tenant code of the analytic tenant. For example, \"WFF_j1r~i1o\"
    tenant_code: typing.Optional[str] = Field(None, alias='tenantCode')

    # An identifiable tenant name that is displayed within Visier. For example, \"Callisto\".
    tenant_display_name: typing.Optional[str] = Field(None, alias='tenantDisplayName')

    # Whether the tenant is enabled or disabled.
    status: typing.Optional[str] = Field(None, alias='status')

    # The date that the tenant was created.
    provision_date: typing.Optional[str] = Field(None, alias='provisionDate')

    # The data version ID that the tenant is using.
    current_data_version: typing.Optional[str] = Field(None, alias='currentDataVersion')

    # The date that the data version was published to production.
    data_version_date: typing.Optional[str] = Field(None, alias='dataVersionDate')

    purchased_modules: typing.Optional[TenantManagementAPIGetResponseDTOPurchasedModules] = Field(None, alias='purchasedModules')

    # The 6-digit NAICS code for the industry to which the analytic tenant belongs.
    industry_code: typing.Optional[int] = Field(None, alias='industryCode')

    # The primary location of operations or where business is performed. If undefined, it is omitted from the response.
    primary_business_location: typing.Optional[BusinessLocationDTO] = Field(None, alias='primaryBusinessLocation')

    # If true, the tenant is an administrating tenant.
    can_administer_other_tenants: typing.Optional[bool] = Field(None, alias='canAdministerOtherTenants')

    embeddable_domains: typing.Optional[TenantManagementAPIGetResponseDTOEmbeddableDomains] = Field(None, alias='embeddableDomains')

    # A set of key-value pairs that represent different customizable properties for the analytic tenant.
    custom_properties: typing.Optional[typing.List[CustomPropertyDTO]] = Field(None, alias='customProperties')

    sso_instance_issuers: typing.Optional[TenantManagementAPIGetResponseDTOSsoInstanceIssuers] = Field(None, alias='ssoInstanceIssuers')

    # The name of the administrating tenant used in Visier URLs.
    vanity_url_name: typing.Optional[str] = Field(None, alias='vanityUrlName')

    # The unique ID of the analysis that's displayed for this tenant when a user logs in.
    home_analysis_id: typing.Optional[str] = Field(None, alias='homeAnalysisId')

    # A list of objects representing the analysis displayed to specific user groups when users log in.
    home_analysis_by_user_group: typing.Optional[typing.List[HomeAnalysisByUserGroupDTO]] = Field(None, alias='homeAnalysisByUserGroup')

    # The custom URL to redirect users into your portal to see the relevant content. This URL is used for links that are shared by and with your users through the sharing capability or email content.
    click_through_link: typing.Optional[str] = Field(None, alias='clickThroughLink')

    # Whether the click-through link is enabled or disabled.
    click_through_link_enabled: typing.Optional[str] = Field(None, alias='clickThroughLinkEnabled')
    class Config:
        arbitrary_types_allowed = True
